#!/bin/bash
set -e

DB_SCRIPTS_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd "postgres/in-container" && pwd)
PROJECT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd "../" && pwd)
pushd "${PROJECT_DIR}"

source .env
DB_NAME=cobra
COMPOSE_FILE=${COMPOSE_FILE-override}

if [ $# -lt 1 ]; then
  echo "Usage: $0 [app-in-docker|app-in-host]"
  exit
fi

APP_RUN_TYPE=$1

compose_for_deploy() {
  docker compose -f docker-compose.yml -f "docker-compose.$COMPOSE_FILE.yml" "$@"
}

run_as_app() {
  if [ "$APP_RUN_TYPE" == "app-in-docker" ]; then
    compose_for_deploy run --rm app "$@"
  else
    "$@"
  fi
}

compose_for_deploy up -d db
compose_for_deploy exec -T db bash < "${DB_SCRIPTS_DIR}/wait-for-postgres.sh"

COBRA_DB_FOUND=$(compose_for_deploy exec db psql --username=postgres \
  -c "SELECT datname FROM pg_catalog.pg_database WHERE lower(datname) = lower('$DB_NAME');" --csv \
  | grep -c "$DB_NAME" || true)
if [ "$COBRA_DB_FOUND" -ne 1 ]; then
  echo "Creating DB..."
  run_as_app bundle exec rake db:create db:schema:load --trace
else
  echo "Migrating DB..."
  run_as_app bundle exec rake db:migrate --trace
fi

echo "Updating IDs..."
run_as_app bundle exec rake ids:update --trace
