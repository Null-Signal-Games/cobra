#= require deck_model
#= require nrdb_cards

$(document).on 'turbolinks:load', ->
  if document.getElementById('display_decks')? || document.getElementById('display_pairing_decks')?

    window.renderDecksDisplay = (decks) =>
      $('#display_decks').empty().append(
        renderDecksDisplayLeftRight({left: decks.corp, right: decks.runner}))
      any_changes = decks.corp.change_type != 'none' || decks.runner.change_type != 'none'
      $('#deck_changes_not_submitted_warning').toggleClass('d-none', !any_changes)

    renderDecksDisplayLeftRight = (decks) =>
      normaliseCardTables(decks)
      [
        renderDeck(decks.left),
        renderDeck(decks.right)
      ]

    normaliseCardTables = (decks) =>
      decks.left.pad_cards = 0
      decks.right.pad_cards = 0
      if decks.left.change_type != decks.right.change_type
        return decks
      if decks.left.change_type != 'change_cards'
        max_cards = Math.max(decks.right.after.cards.length, decks.left.after.cards.length)
        decks.left.pad_cards = max_cards - decks.left.after.cards.length
        decks.right.pad_cards = max_cards - decks.right.after.cards.length
      decks

    renderDeck = (decks) =>
      $container = $('<div/>', {class: 'col-md-6'})
      if decks.before.unset && decks.after.unset
        return $container
      deck = decks.after
      $container.append(
        deckSummaryTable(decks),
        deckDiffTable(decks.diff),
        identityTable(deck),
        cardsTable(decks),
        totalsTable(deck))

    deckSummaryTable = (decks) =>
      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {class: 'thead-dark'}).append(
          $('<tr/>').append(
            $('<th/>', {class: 'text-center deck-name-header', text: decks.description}))),
        $('<tbody/>')
          .append(deckNameRow(decks.after, decks.viewOnly))
          .append(deckChangesRow(decks)))

    deckNameRow = (deck, viewOnly) =>
      if deck.details.name
        $('<tr/>').append($('<td/>')
          .append(deckNameButtons(deck, viewOnly))
          .append(document.createTextNode(deck.details.name)))
      else
        $('<tr/>').append($('<td/>')
          .append('None selected'))

    deckNameButtons = (deck, viewOnly) =>
      if viewOnly
        []
      else if deck.details.mine
        $('<a/>', {
          class: 'float-right dontprint',
          title: 'Edit Deck',
          href: 'https://netrunnerdb.com/en/deck/edit/' + deck.details.nrdb_uuid,
          target: '_blank'
        }).append(
          $('<i/>', {class: 'fa fa-external-link'})
        )
      else
        $('<div/>', {class: 'dropdown float-right dontprint'}).append(
          $('<a/>', {
            title: 'Export deck',
            href: '#',
            'data-toggle': 'dropdown',
            'aria-expanded': false
          }).append(
            $('<i/>', {class: 'fa fa-upload'})
          ),
          $('<div/>', {class: 'dropdown-menu'}).append(
            $('<a/>', {class: 'dropdown-item', href: '#'})
              .append('Copy to clipboard in NetrunnerDB format')
              .on('click', (e) => e.preventDefault(); copyDeckToClipboard(deck)),
            $('<a/>', {class: 'dropdown-item', href: '#'})
              .append('Download as a CSV spreadsheet')
              .on('click', (e) => e.preventDefault(); downloadDeckCsv(deck))
          )
        )

    copyDeckToClipboard = (deck) =>
      msg = ""
      for card from deck.cards
        msg += card.quantity + " " + card.title + "\n"
      navigator.clipboard.writeText(msg)
      alert("Copied to clipboard")

    deckChangesRow = (decks) =>
      switch decks.change_type
        when 'choose_deck' then $('<tr/>', {class: 'alert-warning'}).append(
          $('<td/>').append('Not yet submitted'))
        when 'change_deck' then $('<tr/>', {class: 'alert-warning'}).append(
          $('<td/>').append(
            'Change not yet submitted. Previously submitted:',
            $('<br/>'),
            $('<span/>', {text: decks.before.details.name})
          ))
        when 'change_cards' then $('<tr/>', {class: 'alert-warning'}).append(
          $('<td/>').append('Changes not yet submitted. See below for differences from NetrunnerDB.'))
        else
          []

    deckDiffTable = (diff) =>
      if not diff
        return []

      maxLength = Math.max(diff.added.length, diff.removed.length)
      if maxLength == 0
        return []

      changes = []
      for i in [0..maxLength - 1]
        changes.push({
          added: changeStr(diff.added[i]),
          removed: changeStr(diff.removed[i])
        })

      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {'class': 'thead-dark'}).append(
          $('<tr/>').append(
            $('<th/>', {class: 'text-center', text: 'Added'}),
            $('<th/>', {class: 'text-center', text: 'Removed'}))),
        $('<tbody/>').append(changes.map((change) =>
          $('<tr/>').append(
            $('<td/>', {text: change.added}),
            $('<td/>', {text: change.removed})))))

    identityTable = (deck) =>
      if not deck.details.identity_title
        return []

      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {'class': 'thead-dark'}).append(
          $('<tr/>').append(
            $('<th/>', {class: 'text-center deck-side-column', text: 'Min'}),
            $('<th/>', {class: 'text-center', text: 'Identity'}),
            $('<th/>', {class: 'text-center deck-side-column', text: 'Max'}))),
        $('<tbody/>').append(
          $('<tr/>').append(
            $('<td/>', {class: 'text-center', text: deck.details.min_deck_size}),
            $('<td/>').append(
              cardDisplay({
                title: deck.details.identity_title,
                faction_id: deck.details.faction_id
              })),
            $('<td/>', {class: 'text-center', text: deck.details.max_influence}))))

    cardsTable = (decks) =>
      deck = decks.after
      cards = deck.cards
      if not cards || cards.length < 1
        return []
      sortCards(deck)
      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {'class': 'thead-dark'}).append(
          $('<tr/>').append(
            $('<th/>', {class: 'text-center deck-side-column', text: 'Qty'}),
            $('<th/>', {class: 'text-center', text: 'Card Name'}),
            $('<th/>', {class: 'text-center deck-side-column', text: 'Inf'}))),
        $('<tbody/>').append(
          cards.map((card) =>
            if card.influence > 0
              influence = card.influence
            else
              influence = ''
            $('<tr/>').append(
              $('<td/>', {class: 'text-center', text: card.quantity}),
              $('<td/>').append(cardDisplay(card)),
              $('<td/>', {class: 'text-center', text: influence}))),
          emptyCardRows(decks.pad_cards)))

    cardDisplay = (card) =>
      nodes = []
      if card.card_type_id
        nodes.push($('<img/>', {src: cardTypeImage(card.card_type_id)}))
      if card.faction_id
        nodes.push(nrdbFactionImage(card.faction_id))
      nodes.push(card.title)
      nodes.flatMap((node, index) =>
        if index < nodes.length - 1
          [node, ' ']
        else
          node)

    cardTypeImage = (card_type_id) =>
      switch card_type_id
        when 'agenda' then "<%= asset_path('types/agenda.png') %>"
        when 'asset' then "<%= asset_path('types/asset.png') %>"
        when 'event' then "<%= asset_path('types/event.png') %>"
        when 'hardware' then "<%= asset_path('types/hardware.png') %>"
        when 'ice' then "<%= asset_path('types/ice.png') %>"
        when 'identity' then "<%= asset_path('types/identity.png') %>"
        when 'operation' then "<%= asset_path('types/operation.png') %>"
        when 'program' then "<%= asset_path('types/program.png') %>"
        when 'resource' then "<%= asset_path('types/resource.png') %>"
        when 'upgrade' then "<%= asset_path('types/upgrade.png') %>"

    nrdbFactionImage = (faction_id) =>
      if faction_id.startsWith('neutral')
        $('<img/>', {
          src: "<%= asset_path('nsg.png') %>"
        })
      else
        $('<i/>', {
          class: 'fa icon text-center ' + nrdbFactionIcon(faction_id) + ' ' + nrdbFactionClass(faction_id),
          style: 'width: 16px'
        })

    nrdbFactionIcon = (faction_id) =>
      'icon-' + nrdbFactionClass(faction_id)

    nrdbFactionClass = (faction_id) =>
      faction_id.replaceAll('_', '-')

    sortCards = (deck) =>
      deck.cards.sort((a, b) =>
        if a.card_type_id && b.card_type_id
          compareType = a.card_type_id.localeCompare(b.card_type_id)
          if compareType != 0
            return compareType
        factionA = a.faction_id
        factionB = b.faction_id
        if factionA && factionB
          compareFaction = factionA.localeCompare(factionB)
          if compareFaction != 0
            if factionA == deck.details.faction_id
              return -1
            if factionB == deck.details.faction_id
              return 1
            if factionA.startsWith('neutral')
              return -1
            if factionB.startsWith('neutral')
              return 1
            return compareFaction
        a.title.localeCompare(b.title))

    emptyCardRows = (numRows) =>
      rows = []
      for i in [0...numRows]
        rows.push($('<tr/>', {class: 'd-none d-md-table-row'}).append(
          $('<td/>').append('&nbsp;'),
          $('<td/>').append('&nbsp;'),
          $('<td/>').append('&nbsp;')
        ))
      rows

    totalsTable = (deck) =>
      cards = deck.cards
      if not cards || cards.length < 1
        return []
      qty = cards.map((card) => card.quantity)
        .reduce(((partialSum, a) => partialSum + a), 0)
      influence = cards.map((card) => card.influence)
        .reduce(((partialSum, a) => partialSum + a), 0)
      return $('<table/>', {
        class: 'table table-bordered table-striped-horizontal'
      }).append(
        $('<tbody/>').append(
          $('<tr/>').append(
            $('<td/>', {class: 'text-center deck-side-column', text: qty}),
            $('<td/>', {class: 'text-center', text: 'Totals'}),
            $('<td/>', {class: 'text-center deck-side-column', text: influence}))))

    changeStr = (change) =>
      if change
        return change.quantity + ' ' + change.title
      else
        return ''

    if document.getElementById('display_decks')?
      try
        renderDecksDisplay(readDecksFromInputs())
      catch e
        console.log(e)

    if document.getElementById('display_pairing_decks')?
      try
        decks = readPairingDecksFromInputs()
        $('#display_pairing_decks').append(
          renderDecksDisplayLeftRight({left: decks.player1, right: decks.player2}))
      catch e
        console.log(e)
