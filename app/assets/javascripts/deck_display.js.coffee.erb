#= require deck_model
#= require nrdb_cards

$(document).on 'turbolinks:load', ->
  if deckDisplayEnabled()

    window.renderDecksDisplay = (decks) =>
      renderDecksDisplayLeftRight({
        left: decks.corp,
        right: decks.runner,
        anchor: $('#display_decks')
      })

    renderDecksDisplayLeftRight = (decks) =>
      normaliseCardTables(decks)
      renderChangesNotSubmitted(decks)
      enableEditDecksButton(decks)
      decks.anchor.empty().append(
        renderDeck(decks.left, decks),
        renderDeck(decks.right, decks)
      )

    normaliseCardTables = (decks) =>
      sortCards(decks.left.before)
      sortCards(decks.left.after)
      sortCards(decks.right.before)
      sortCards(decks.right.after)
      decks.left.pad_cards = 0
      decks.right.pad_cards = 0
      if shouldPadCards(decks)
        max_cards = Math.max(decks.right.after.cards.length, decks.left.after.cards.length)
        decks.left.pad_cards = max_cards - decks.left.after.cards.length
        decks.right.pad_cards = max_cards - decks.right.after.cards.length
      normaliseEditInPlace(decks.left)
      normaliseEditInPlace(decks.right)
      decks

    shouldPadCards = (decks) =>
      if decks.left.editInPlace || decks.right.editInPlace
        return false
      if decks.left.change_type != decks.right.change_type
        return false
      decks.left.change_type != 'change_cards'

    normaliseEditInPlace = (deck) =>
      if deck.editInPlace
        deck.after.cards = deck.after.cards.concat([emptyCard()])

    emptyCard = () =>
      {title: '', quantity: 0, influence: 0, influence_cost: 0}

    renderChangesNotSubmitted = (decks) =>
      $changesNotSubmitted = $('#deck_changes_not_submitted_warning')
      if $changesNotSubmitted.length > 0
        any_changes = decks.editBothInPlace || decks.left.change_type != 'none' || decks.right.change_type != 'none'
        $changesNotSubmitted.toggleClass('d-none', !any_changes)

    enableEditDecksButton = (decks) =>
      $button = $('#edit_decks_button')
      if $button.length == 0
        return
      $button.one 'click', (e) ->
        e.preventDefault()
        decks.editBothInPlace = !decks.editBothInPlace
        if decks.editBothInPlace
          editDeckInPlace(decks.left)
          editDeckInPlace(decks.right)
          $('#choose_nrdb_decks_button').addClass('d-none')
          $button.empty().append($('<i/>', {class: 'fa fa-undo'}), ' Cancel edits')
        else
          undoEditInPlace(decks.left)
          undoEditInPlace(decks.right)
          $('#choose_nrdb_decks_button').removeClass('d-none')
          $button.empty().append($('<i/>', {class: 'fa fa-edit'}), ' Edit decks in place')
        renderDecksDisplayLeftRight(decks)

    editDeckInPlace = (deck) =>
      deck.editInPlace = true
      deck.beforeEditInPlace = cloneDeck(deck.after)

    undoEditInPlace = (deck) =>
      deck.editInPlace = false
      deck.after = cloneDeck(deck.beforeEditInPlace)
      delete deck.beforeEditInPlace
      deck.input.val(JSON.stringify(deck.after))
      addDeckDiff(deck)

    renderDeck = (deck, decks) =>
      $container = $('<div/>', {class: 'col-md-6'})
        .append(deckSummaryTable(deck, decks))
      if deck.before.unset && deck.after.unset
        return $container
      $totalsTable = totalsTable(deck)
      deck.totalsTable = $totalsTable
      $container.append(
        deckDiffTable(deck),
        identityTable(deck),
        cardsTable(deck),
        $totalsTable)

    deckSummaryTable = (deck, decks) =>
      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {class: 'thead-dark'}).append(
          $('<tr/>').append(
            $('<th/>', {class: 'text-center deck-name-header', text: deck.description}))),
        $('<tbody/>')
          .append(deckNameRow(deck, decks))
          .append(deckChangesRow(deck)))

    deckNameRow = (deck, decks) =>
      if deck.after.details.name
        $('<tr/>').append($('<td/>')
          .append(deckNameDisplay(deck, decks)))
      else
        $('<tr/>').append($('<td/>')
          .append('None selected'))

    deckNameDisplay = (deck, decks) =>
      deckAfter = deck.after
      if deck.viewOnly
        return document.createTextNode(deckAfter.details.name)
      buttons = [
        $('<span/>', {class: 'dropdown'}).append(
          $('<a/>', {
            title: 'Export deck',
            href: '#',
            'data-toggle': 'dropdown',
            'aria-expanded': false
          }).append(
            $('<i/>', {class: 'fa fa-download'})
          ),
          $('<div/>', {class: 'dropdown-menu'}).append(
            $('<a/>', {class: 'dropdown-item', href: '#'})
              .append('Copy to clipboard in NetrunnerDB format')
              .on('click', (e) => e.preventDefault(); copyDeckToClipboard(deckAfter)),
            $('<a/>', {class: 'dropdown-item', href: '#'})
              .append('Download as a CSV spreadsheet')
              .on('click', (e) => e.preventDefault(); downloadDeckCsv(deckAfter))
          )
        )
      ]
      if deckAfter.details.mine
        buttons.push($('<a/>', {
          class: 'ml-2',
          title: 'Edit Deck',
          href: 'https://netrunnerdb.com/en/deck/edit/' + deckAfter.details.nrdb_uuid,
          target: '_blank'
        }).append(
          $('<i/>', {class: 'fa fa-external-link'})
        ))
      display = [
        document.createTextNode(deckAfter.details.name),
        $('<div/>', {class: 'float-right dontprint'}).append(buttons)
      ]
      display

    updateDeckInput = (deck) =>
      deck.input.val(JSON.stringify(cloneDeck(deck.after)))

    cloneDeck = (deck) =>
      cards = deck.cards
        .filter((card) => card.quantity > 0 && card.nrdb_card_id)
        .map(removeExtraCardFields)
      {
        details: structuredClone(deck.details),
        cards: cards
      }

    removeExtraCardFields = (card) =>
      {
        title: card.title,
        quantity: card.quantity,
        influence: card.influence,
        influence_cost: card.influence_cost,
        nrdb_card_id: card.nrdb_card_id,
        nrdb_printing_id: card.nrdb_printing_id,
        card_type_id: card.card_type_id,
        faction_id: card.faction_id
      }

    copyDeckToClipboard = (deck) =>
      msg = ""
      for card from deck.cards
        msg += card.quantity + " " + card.title + "\n"
      navigator.clipboard.writeText(msg)
      alert("Copied to clipboard")

    deckChangesRow = (deck) =>
      if deck.editInPlace
        return []
      switch deck.change_type
        when 'choose_deck' then $('<tr/>', {class: 'alert-warning'}).append(
          $('<td/>').append('Not yet submitted'))
        when 'change_deck' then $('<tr/>', {class: 'alert-warning'}).append(
          $('<td/>').append(
            'Change not yet submitted. Previously submitted:',
            $('<br/>'),
            $('<span/>', {text: deck.before.details.name})
          ))
        when 'change_cards' then $('<tr/>', {class: 'alert-warning'}).append(
          $('<td/>').append('Changes not yet submitted. See below for differences from currently stored deck.'))
        else
          []

    deckDiffTable = (deck) =>
      if deck.editInPlace
        return []
      diff = deck.diff
      if not diff
        return []

      maxLength = Math.max(diff.added.length, diff.removed.length)
      if maxLength == 0
        return []

      changes = []
      for i in [0..maxLength - 1]
        changes.push({
          added: changeStr(diff.added[i]),
          removed: changeStr(diff.removed[i])
        })

      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {'class': 'thead-dark'}).append(
          $('<tr/>').append(
            $('<th/>', {class: 'text-center', text: 'Added'}),
            $('<th/>', {class: 'text-center', text: 'Removed'}))),
        $('<tbody/>').append(changes.map((change) =>
          $('<tr/>').append(
            $('<td/>', {text: change.added}),
            $('<td/>', {text: change.removed})))))

    changeStr = (change) =>
      if change
        return change.quantity + ' ' + change.title
      else
        return ''

    identityTable = (deck) =>
      details = deck.after.details
      if not details.identity_title
        return []

      $minDeckSizeCell = $('<td/>', {class: 'text-center align-middle', text: details.min_deck_size})
      $maxInfCell = $('<td/>', {class: 'text-center align-middle', text: details.max_influence})
      deck.minDeckSizeCell = $minDeckSizeCell
      deck.maxInfCell = $maxInfCell
      $identityDisplayCell = $('<td/>').append(
        cardDisplay({
          title: details.identity_title,
          faction_id: details.faction_id
        }, deck, queryDeckIdentity, (card) => updateIdentity(deck, card)))
      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {'class': 'thead-dark'}).append(
          $('<tr/>').append(
            $('<th/>', {class: 'text-center deck-side-column', text: 'Min'}),
            $('<th/>', {class: 'text-center', text: 'Identity'}),
            $('<th/>', {class: 'text-center deck-side-column', text: 'Max'}))),
        $('<tbody/>').append(
          $('<tr/>').append(
            $minDeckSizeCell,
            $identityDisplayCell,
            $maxInfCell)))

    updateIdentity = (deck, card) =>
      details = deck.after.details
      details.identity_title = card.title
      details.min_deck_size = card.minimum_deck_size
      details.max_influence = card.influence_limit
      details.faction_id = card.faction_id
      details.identity_nrdb_card_id = card.nrdb_card_id
      details.identity_nrdb_printing_id = card.nrdb_printing_id
      deck.minDeckSizeCell.text(card.minimum_deck_size)
      deck.maxInfCell.text(card.influence_limit)
      for card from deck.after.cards
        updateCardQuantity(card, deck, card.quantity)
        card.influenceCell.empty().append(influenceDisplay(card, deck))
      updateTotalsTable(deck)
      updateDeckInput(deck)

    cardsTable = (deck) =>
      deckAfter = deck.after
      cards = deckAfter.cards
      if not cards || cards.length < 1
        return []
      $tableBody = $('<tbody/>')
      deck.cardsTableBody = $tableBody
      return $('<table/>', {
        class: 'table table-bordered table-striped'
      }).append(
        $('<thead/>', {'class': 'thead-dark'}).append(
          $('<tr/>').append(
            applyQtyColWidth(deck, $('<th/>', {class: 'text-center deck-side-column', text: 'Qty'})),
            $('<th/>', {class: 'text-center', text: 'Card Name'}),
            $('<th/>', {class: 'text-center deck-side-column', text: 'Inf'}))),
        $tableBody.append(
          cards.map((card) => cardRow(card, deck)),
          emptyCardRows(deck.pad_cards)))

    applyQtyColWidth = (deck, $tableHeader) =>
      if deck.editInPlace
        $tableHeader.css('width', '5em')
      else
        $tableHeader

    cardRow = (card, deck) =>
      $tableRow = $('<tr/>')
      $influenceCell = $('<td/>', {class: 'text-center align-middle'})
        .append(influenceDisplay(card, deck))
      card.tableRow = $tableRow
      card.influenceCell = $influenceCell
      $quantityCell = $('<td/>', {class: 'text-center align-middle'})
        .append(quantityDisplay(card, deck))
      $titleCell = $('<td/>')
        .append(cardDisplay(card, deck, queryCardInDeck, (card) => updateCardRow(card, deck)))
      $tableRow.append($quantityCell, $titleCell, $influenceCell)

    updateCardRow = (card, deck) =>
      card.influenceCell.empty().append(influenceDisplay(card, deck))
      updateTotalsTable(deck)
      updateDeckInput(deck)

    quantityDisplay = (card, deck) =>
      if deck.editInPlace
        displayNode = document.createTextNode(card.quantity)
        [
          $('<a/>', {
            title: 'Remove'
            href: '#'
            class: 'mr-2'
          }).append(
            $('<i/>', {class: 'fa fa-minus'})
          ).on('click', ((e) =>
            e.preventDefault()
            if card.quantity > 0
              updateCardQuantity(card, deck, card.quantity - 1)
              displayNode.nodeValue = card.quantity
              updateCardRow(card, deck)
              removeCardIfNeeded(card, deck))),
          displayNode,
          $('<a/>', {
            title: 'Add'
            href: '#'
            class: 'ml-2'
          }).append(
            $('<i/>', {class: 'fa fa-plus'})
          ).on('click', ((e) =>
            e.preventDefault()
            updateCardQuantity(card, deck, card.quantity + 1)
            displayNode.nodeValue = card.quantity
            updateCardRow(card, deck)
            addNewCardIfNeeded(card, deck)))
        ]
      else
        '' + card.quantity

    updateCardQuantity = (card, deck, quantity) =>
      card.quantity = quantity
      if deck.after.details.faction_id != card.faction_id
        card.influence = card.influence_cost * quantity
      else
        card.influence = 0

    addNewCardIfNeeded = (editedCard, deck) =>
      cards = deck.after.cards
      if cards.indexOf(editedCard) == cards.length - 1
        card = emptyCard()
        deck.after.cards = cards.concat([card])
        deck.cardsTableBody.append(cardRow(card, deck))

    removeCardIfNeeded = (editedCard, deck) =>
      if editedCard.quantity != 0
        return
      cards = deck.after.cards
      index = cards.indexOf(editedCard)
      if index == cards.length - 1
        return
      cards.splice(index, 1)
      editedCard.tableRow.remove()

    influenceDisplay = (card, deck) =>
      if card.influence > 0
        influence = '' + card.influence
      else
        influence = ''
      return influence

    cardDisplay = (card, deck, query, update) =>
      if deck.editInPlace
        return $('<input/>', {class: 'w-100 form-control'}).val(card.title).on 'change', ->
          $input = $(this)
          searchNrdbCards query(deck, $input.val()), (results) ->
            if results.length == 1
              result = results[0].attributes
              $input.val(result.title)
              Object.assign(card, result)
              card.nrdb_printing_id = result.id
              card.nrdb_card_id = result.card_id
              card.card_type_id = result.card_type_id
              card.influence = result.influence_cost * card.quantity
              $input.addClass('is-valid').removeClass('is-invalid')
              if update
                update(card)
            else
              $input.addClass('is-invalid').removeClass('is-valid')
      nodes = []
      if card.card_type_id
        nodes.push($('<img/>', {src: cardTypeImage(card.card_type_id)}))
      if card.faction_id
        nodes.push(nrdbFactionImage(card.faction_id))
      nodes.push(card.title)
      nodes.flatMap((node, index) =>
        if index < nodes.length - 1
          [node, ' ']
        else
          node)

    queryCardInDeck = (deck, query) =>
      queryWithDeck deck, '!t:identity ' + query

    queryDeckIdentity = (deck, query) =>
      queryWithDeck deck, 't:identity ' + query

    queryWithDeck = (deck, query) =>
      'd:' + deck.after.details.side_id + ' ' + query

    cardTypeImage = (card_type_id) =>
      switch card_type_id
        when 'agenda' then "<%= asset_path('types/agenda.png') %>"
        when 'asset' then "<%= asset_path('types/asset.png') %>"
        when 'event' then "<%= asset_path('types/event.png') %>"
        when 'hardware' then "<%= asset_path('types/hardware.png') %>"
        when 'ice' then "<%= asset_path('types/ice.png') %>"
        when 'identity' then "<%= asset_path('types/identity.png') %>"
        when 'operation' then "<%= asset_path('types/operation.png') %>"
        when 'program' then "<%= asset_path('types/program.png') %>"
        when 'resource' then "<%= asset_path('types/resource.png') %>"
        when 'upgrade' then "<%= asset_path('types/upgrade.png') %>"

    nrdbFactionImage = (faction_id) =>
      if faction_id.startsWith('neutral')
        $('<img/>', {
          src: "<%= asset_path('nsg.png') %>"
        })
      else
        $('<i/>', {
          class: 'fa icon text-center ' + nrdbFactionIcon(faction_id) + ' ' + nrdbFactionClass(faction_id),
          style: 'width: 16px'
        })

    nrdbFactionIcon = (faction_id) =>
      'icon-' + nrdbFactionClass(faction_id)

    nrdbFactionClass = (faction_id) =>
      faction_id.replaceAll('_', '-')

    sortCards = (deck) =>
      deck.cards.sort((a, b) =>
        if a.card_type_id && b.card_type_id
          compareType = a.card_type_id.localeCompare(b.card_type_id)
          if compareType != 0
            return compareType
        else if a.card_type_id
          return 1
        else if b.card_type_id
          return -1
        factionA = a.faction_id
        factionB = b.faction_id
        if factionA && factionB
          compareFaction = factionA.localeCompare(factionB)
          if compareFaction != 0
            if factionA == deck.details.faction_id
              return -1
            if factionB == deck.details.faction_id
              return 1
            if factionA.startsWith('neutral')
              return -1
            if factionB.startsWith('neutral')
              return 1
            return compareFaction
        else if factionA
          return 1
        else if factionB
          return -1
        a.title.localeCompare(b.title))

    emptyCardRows = (numRows) =>
      rows = []
      for i in [0...numRows]
        rows.push($('<tr/>', {class: 'd-none d-md-table-row'}).append(
          $('<td/>').append('&nbsp;'),
          $('<td/>').append('&nbsp;'),
          $('<td/>').append('&nbsp;')
        ))
      rows

    totalsTable = (deck) =>
      cards = deck.after.cards
      if not cards || cards.length < 1
        return []
      deck.totalsTable = $('<table/>', {
        class: 'table table-bordered table-striped-horizontal'
      })
      updateTotalsTable(deck)

    updateTotalsTable = (deck) =>
      cards = deck.after.cards
      qty = cards
        .filter((card) => card.quantity)
        .map((card) => card.quantity)
        .reduce(((partialSum, a) => partialSum + a), 0)
      influence = cards
        .filter((card) => card.influence)
        .map((card) => card.influence)
        .reduce(((partialSum, a) => partialSum + a), 0)
      deck.totalsTable.empty().append(
        $('<tbody/>').append(
          $('<tr/>').append(
            $('<td/>', {class: 'text-center deck-side-column', text: qty}),
            $('<td/>', {class: 'text-center', text: 'Totals'}),
            $('<td/>', {class: 'text-center deck-side-column', text: influence}))))

    if document.getElementById('display_decks')?
      try
        renderDecksDisplay(readDecksFromInputs())
      catch e
        console.log(e)

    if document.getElementById('display_pairing_decks')?
      try
        decks = readPairingDecksFromInputs()
        renderDecksDisplayLeftRight({
          left: decks.player1,
          right: decks.player2,
          anchor: $('#display_pairing_decks')
        })
      catch e
        console.log(e)

    if document.getElementById('display_player_decks')?
      try
        decks = readPlayerDecksFromInputs()
        renderDecksDisplayLeftRight({
          left: decks.corp,
          right: decks.runner,
          anchor: $('#display_player_decks')
        })
      catch e
        console.log(e)
