.col-md-6
  - if @tournament.nrdb_deck_registration?
    - if @tournament.all_players_unlocked?
      .alert.alert-info Registration is open
    - elsif @current_user_is_running_tournament && @tournament.any_player_unlocked?
      .alert.alert-info One or more players' registrations are unlocked for editing
    - elsif @current_user_player && !@current_user_player.registration_locked?
      .alert.alert-info Your registration is unlocked for editing
  .card
    ul.list-group.list-group-flush
      - if @tournament.slug
        li.list-group-item
          .small.text-secondary Shortcode:
          | #{@tournament.slug} (
          = link_to tournament_url(@tournament.slug, request), tournament_url(@tournament.slug, request)
          | )

      li.list-group-item
        .small.text-secondary Organiser:
        | #{@tournament.user.nrdb_username}
      li.list-group-item
        .small.text-secondary Players:
        => pluralize(@players.count, 'active player')
        | (#{@dropped.count} dropped)
      - if policy(@tournament).edit?
        li.list-group-item
          .small.text-secondary
            | QR Code:
          .row
            .col-sm-6
              = link_to qr_tournament_path(@tournament), :target => '_blank' do
                => fa_icon 'qrcode'
                | Open Printable QR Code
      - if @tournament.ask_for_streaming_consent? && @current_user_player
        li.list-group-item
          = simple_form_for @current_user_player, url: tournament_player_path(@tournament, @current_user_player) do |f|
            = f.input_field :stream_consent_form, value: true, hidden: true
            = f.input :consented_to_be_streamed, as: :boolean,
                    class: 'form-check-input', input_html: { class: 'mr-1' },
                    inline_label: Tournament.streaming_consent_notice
