- single_sided = round.stage.single_sided?
- round.pairings.each do |pairing|
  - left_player = @players[pairing.player1_id]
  - left_player_number = 1
  - right_player = @players[pairing.player2_id]
  - right_player_number = 2
  - if single_sided && !pairing.player1_is_corp?
    - left_player = @players[pairing.player2_id]
    - left_player_number = 2
    - right_player = @players[pairing.player1_id]
    - right_player_number = 1
  .row.m-1.round_pairing.align-items-center class="table_#{pairing.table_number} #{'reported' if pairing.reported? && current_user == @tournament.user}"
    .col-sm-2
      | Table #{pairing.table_number}
      - if @tournament.allow_streaming_opt_out? && policy(round.tournament).edit?
        - if pairing.player_ids.all? { |player_id| @players[player_id].include_in_stream? }
          = fa_icon 'video-camera',
                  class: 'text-success streaming-tooltip ml-2',
                  title: 'May be included in video coverage'
        - elsif round.stage.double_elim?
          = fa_icon 'video-camera',
                  class: 'text-warning streaming-tooltip ml-2',
                  title: 'One or both players requested not to be included in video coverage,
                  but were informed this may not be possible in the cut'
        - else
          span.text-nowrap.streaming-tooltip.ml-2 title='One or both players requested not to be included in video coverage'
            = fa_icon 'video-camera', class: 'text-secondary'
            =< fa_icon 'ban', class: 'text-danger'
        javascript:
            $('.streaming-tooltip').tooltip()
    - if pairing.decks_visible_to(current_user)
      =< link_to view_decks_tournament_round_pairing_path(@tournament, round, pairing) do
        => fa_icon 'eye'
        | View decks
    .col-sm.left_player_name
      = left_player.name_with_pronouns
      <br />
      =< render 'player_side', pairing: pairing, player: left_player, single_sided: single_sided
      - if left_player.id
        .ids
          - if round.stage.single_sided?
            = render left_player.corp_identity_object
          - else
            = render left_player.corp_identity_object
            = render left_player.runner_identity_object
    - if policy(round.tournament).edit?
      .col-sm-5.centre_score
        .preset_score
          - presets(pairing).each do |data|
            => preset_score_button pairing, data
          - unless round.stage.single_sided?
            = link_to '...', '#', class: 'btn btn-primary toggle_custom_score'
        .custom_score
          = simple_form_for pairing, url: report_tournament_round_pairing_path(round.tournament, round, pairing), method: :post, html: { class: 'form-inline' } do |f|
            .mx-auto
              = f.hidden_field :score1_runner, value: 0
              = f.hidden_field :score1_corp, value: 0
              = f.hidden_field :score2_runner, value: 0
              = f.hidden_field :score2_corp, value: 0
              - if left_player_number == 1
                = f.text_field :score1, style: 'width: 2.5em;', class: 'form-control'
              - else
                = f.text_field :score2, style: 'width: 2.5em;', class: 'form-control'
              = button_tag type: :submit, class: 'btn btn-primary mx-2' do
                => fa_icon 'flag-checkered'
                | Save
              - if right_player_number == 1
                = f.text_field :score1, style: 'width: 2.5em;', class: 'form-control'
              - else
                = f.text_field :score2, style: 'width: 2.5em;', class: 'form-control'
              =< link_to '...', '#', class: 'btn btn-primary toggle_custom_score'
              div class='form-group'
                div class='form-check form-check-inline'
                  = f.check_box :intentional_draw, class: 'form-check-input'
                  = f.label :intentional_draw, 'ScIntentional Draw', class: 'form-check-label'
                - unless round.stage.single_sided?
                  div class='form-check form-check-inline'
                    = f.check_box :two_for_one, class: 'form-check-input'
                    = f.label :two_for_one, '2 for 1', class: 'form-check-label'
    - else
      .col-sm-2.centre_score
        = readable_score(pairing)
        - if pairing.intentional_draw
          span class='badge badge-pill badge-secondary score-badge'
            | ID
        - if pairing.two_for_one
          span class='badge badge-pill badge-secondary score-badge'
            | 2 for 1
    .col-sm.right_player_name
      = right_player.name_with_pronouns
      <br />
      =< render 'player_side', pairing: pairing, player: right_player, single_sided: single_sided
      - if right_player.id
        .ids
          - if round.stage.single_sided?
            = render right_player.runner_identity_object
          - else
            = render right_player.corp_identity_object
            = render right_player.runner_identity_object
    - if policy(round.tournament).update?
      .col-sm-1
        = link_to tournament_round_pairing_path(round.tournament, round, pairing), method: :delete, class: 'btn btn-danger', data: { confirm: 'Are you sure? This cannot be reversed.' } do
          => fa_icon 'trash'
